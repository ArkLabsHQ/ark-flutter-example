// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<bool> walletExists({required String dataDir}) =>
    RustLib.instance.api.crateApiArkApiWalletExists(dataDir: dataDir);

Future<String> setupNewWallet({required String dataDir}) =>
    RustLib.instance.api.crateApiArkApiSetupNewWallet(dataDir: dataDir);

Future<String> loadExistingWallet({required String dataDir}) =>
    RustLib.instance.api.crateApiArkApiLoadExistingWallet(dataDir: dataDir);

Future<String> restoreWallet({required String nsec, required String dataDir}) =>
    RustLib.instance.api
        .crateApiArkApiRestoreWallet(nsec: nsec, dataDir: dataDir);

Future<Balance> balance() => RustLib.instance.api.crateApiArkApiBalance();

Future<Addresses> address() => RustLib.instance.api.crateApiArkApiAddress();

class Addresses {
  final String boarding;
  final String offchain;

  /// bitcoin:tb1pgfr8058rfwuxujs03yrwpwazzf9xh34az2z6nzmjyly5gy7yzk3sa4dkh8?ark=tark1lfeudey8dlajmlykr4mrej56h3eafwywlju0telljtw9t6d2257sz8qw3fu7hgf6582e68gawp950gndjlvw4r5ler9pztxp0d5srsc5welph&amount=0.00001234
  final String bip21;

  const Addresses({
    required this.boarding,
    required this.offchain,
    required this.bip21,
  });

  @override
  int get hashCode => boarding.hashCode ^ offchain.hashCode ^ bip21.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Addresses &&
          runtimeType == other.runtimeType &&
          boarding == other.boarding &&
          offchain == other.offchain &&
          bip21 == other.bip21;
}

class Balance {
  final OffchainBalance offchain;

  const Balance({
    required this.offchain,
  });

  @override
  int get hashCode => offchain.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Balance &&
          runtimeType == other.runtimeType &&
          offchain == other.offchain;
}

class OffchainBalance {
  final BigInt pendingSats;
  final BigInt confirmedSats;
  final BigInt totalSats;

  const OffchainBalance({
    required this.pendingSats,
    required this.confirmedSats,
    required this.totalSats,
  });

  @override
  int get hashCode =>
      pendingSats.hashCode ^ confirmedSats.hashCode ^ totalSats.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OffchainBalance &&
          runtimeType == other.runtimeType &&
          pendingSats == other.pendingSats &&
          confirmedSats == other.confirmedSats &&
          totalSats == other.totalSats;
}
